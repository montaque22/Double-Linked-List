{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap d185769b13dedda09976","webpack:///./doubleLinkList.js"],"names":["DoubleLinkedList","tail","head","size","undoCommandList","shouldStoreCommand","_this","onChangeList","storeCommand","curriedCommand","push","i","length","wrapper","method","args","arguments","apply","normalizePosition","position","isNaN","recursiveFindByIndex","node","indexPositionOfNode","hasNext","Error","getNext","deleteAtPosition","current","leftSide","getPrevious","rightSide","setNext","setPrevious","insertAtPosition","getData","data","LinkNode","isAtEnd","leftNode","rightNode","findAll","comparitor","list","cycle","isMatch","keys","Object","key","getDataForKey","undo","pop","cb","isReversed","idx","shouldContinue","psychic","onChange","func","canUndo","clearUndo","isEmpty","undefined","getSize","insertAtStart","insertAtEnd","deleteAll","counter","undoItAll","removeNode","shouldStop","getTail","getHead","move","oldIdx","newIdx","toArray","array","nextNode","previousNode","prev","next","create","prototype","defineProperties","value","enumerable","writable","configurable","hasPrev","getProtectedData","appendData","setData","property","console","error","obj"],"mappings":"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","file":"doublelinkedlist.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d185769b13dedda09976","'use strict';\n\n\n\n/**\n @author Michael Montaque\n @description Double Linked List\n @class DoubleLinkedList\n */\nexport const DoubleLinkedList = function () {\n    var tail;\n    var head;\n    var size = 0;\n    var undoCommandList = [];\n    var shouldStoreCommand = true;\n    var _this = this;\n    var onChangeList = [];\n\n    /*\n        HELPER FUNCTIONS: StoreCommand  AND   Wrapper Needed to operate the undo functions\n     */\n    function storeCommand(curriedCommand){\n        shouldStoreCommand && undoCommandList.push(curriedCommand);\n        for(var i = 0;i < onChangeList.length;i++){\n            onChangeList[i]();\n        }\n    }\n\n\n    function wrapper(method){\n        return function(){\n            var args =  arguments;\n            return function(){\n                method.apply(_this, args)\n            }\n        }\n    }\n\n\n    function normalizePosition(position){\n\n        if(isNaN(position) || position < 0){\n            return 0\n        }else if(position >= size){\n            return size - 1\n        }\n        return position;\n    }\n\n\n    function recursiveFindByIndex(node, indexPositionOfNode){\n\n\n        // Base Case\n        if(indexPositionOfNode <= 0){\n            return node;\n        }\n\n        // Error Case\n        else if(!node){\n            return null\n        }\n\n        // Error Case\n        else if(!node.hasNext() && indexPositionOfNode > 0){\n            return null;\n        }\n\n        // Error Case\n        else if(indexPositionOfNode >= size){\n            throw new Error('The index exceeds the size of the list')\n        }\n\n        // Recursive Call\n        return recursiveFindByIndex(node.getNext(), --indexPositionOfNode)\n    }\n\n    /*\n     CORE INSERT REMOVE FUNCTIONS: DeleteAtPosition  AND  InsertAtPosition\n     These need to be in the main object scope as they refer to each other.\n     */\n    function deleteAtPosition(position){\n        var current = null;\n\n        // There is nothing to remove\n        if(size === 0){\n            return null;\n        }\n\n        // remove the only node\n        else if(size === 1){\n            // temporarily save the node (doesn't matter heads or tails)\n            current = head;\n\n            // set both head and tail to null\n            head = tail = null;\n\n        }else{\n\n            // make sure the position is valid\n            position = normalizePosition(position);\n\n            // find the node at the position\n            current = recursiveFindByIndex(head, position);\n\n            // Get the left and right side (prev and next) of the current node\n            var leftSide    = current.getPrevious();\n            var rightSide   = current.getNext();\n\n            // If the left node exist, set it to the right (it is ok if the right doesn't exist)\n            leftSide && leftSide.setNext(rightSide);\n\n            // If the right node exist, set it to the left (it is ok if the left doesn't exist)\n            rightSide && rightSide.setPrevious(leftSide);\n\n            // Handle fringe cases\n            if(position === 0){\n                // if the position is at the beginning, update the head to be the right node (since the left doesn't exist)\n                head = rightSide;\n            }else if(position === size - 1){\n                // if the position is at the end, update the tail to be the left node (since the right doesn't exist)\n                tail = leftSide\n            }\n\n        }\n\n        size--;\n\n        storeCommand(wrapper(insertAtPosition)(current.getData(),position));\n\n        return current;\n    }\n\n    function insertAtPosition(data, position){\n        position = (isNaN(position) || position < 0) ? 0 : position;\n\n        // Create the new node\n        var node = new LinkNode(data);\n\n        if(size === 0){\n            head = tail = node;\n        }\n        else {\n\n            // If the position is greater than the size of the list then append the node to the end\n            var isAtEnd = position >= size;\n\n            // Find the node at the given index (If it is greater than the index it will return the last on in the array)\n            var current = recursiveFindByIndex(head, (isAtEnd) ? size - 1 : position);\n\n            // Get the left node from the current node (if at the end then the left node is the current node\n            var leftNode    = (isAtEnd) ? current : current.getPrevious();\n\n            // get the next node\n            var rightNode   = (isAtEnd) ? null : current;\n\n            // left node will point its next to the node while...\n            leftNode    && leftNode.setNext(node);\n\n            // the right node will point its previous to the node\n            rightNode   && rightNode.setPrevious(node);\n\n            node.setPrevious(leftNode).setNext(rightNode);\n\n            tail = (isAtEnd) ? node : tail;\n\n            head = (position <=0 ) ? node : head;\n\n        }\n\n\n        // Store the opposite command for the undo\n        storeCommand(wrapper(deleteAtPosition)(position));\n\n        size++;\n    }\n\n    function findAll(comparitor){\n        var list = [];\n\n        // Search for nodes using the function comparitor that the user passed in\n        if(typeof comparitor === 'function'){\n            cycle(function(node){\n                comparitor(node) && list.push(node);\n                return true;\n            });\n        }\n\n        // Search for nodes using the object to compare against\n        else if(typeof comparitor === 'object'){\n            list = findAll(function(node){\n                var isMatch = true;\n                var keys = Object.keys(comparitor);\n                for(var i = 0 ;i < keys.length; i++){\n                    var key = keys[i];\n                    if (node.getDataForKey(key) !== comparitor[key]){\n                        isMatch = false;\n                        break;\n                    }\n                }\n                return isMatch;\n            });\n        }\n        return list;\n    };\n\n    function undo(){\n        shouldStoreCommand = false;\n        var method = undoCommandList.pop();\n        typeof method === 'function' && method();\n        shouldStoreCommand = true;\n    };\n\n    function cycle(cb, isReversed){\n        if(typeof cb === 'function'){\n            var current = isReversed ? tail : head;\n            var idx = isReversed ? size - 1 : 0;\n            var shouldContinue = true;\n            while(current && shouldContinue){\n                shouldContinue = cb(current, idx);\n                current = isReversed ? current.getPrevious() : current.getNext();\n                idx += isReversed ? -1 : 1;\n            }\n        }\n    };\n\n    function psychic(cb, isReversed){\n        if(typeof cb === 'function'){\n            var current = isReversed ? tail : head;\n            var idx = isReversed ? size - 1 : 0;\n            var shouldContinue = true;\n            while(current && shouldContinue){\n                shouldContinue = cb(current, current.getPrevious(), current.getNext(), idx);\n                current = isReversed ? current.getPrevious() : current.getNext();\n                idx += isReversed ? -1 : 1;\n            }\n        }\n    };\n\n\n    /*\n        ------ METHODS AVAILABLE TO THE USER ------\n     */\n\n    /**\n     * @namespace DoubleLinkedList-Type\n     * @callback Psychic-Callback\n     * @param {Object} currentNode - The current node object in the list\n     * @param {Object} previousNode - The previous node object in the list\n     * @param {Object} nextNode - The next node object in the list\n     * @param {Number} idx - index of the object in the list\n     * @return {boolean} Optionally the user can return false to break free from the cycle early\n     */\n\n    /**\n     * @namespace DoubleLinkedList-Type\n     * @callback Callback\n     * @param {Object} node - object in the list\n     * @param {Number} idx - index of the object in the list\n     * @return {boolean} Optionally the user can return false to break free from the cycle early\n     */\n\n    /**\n     * @namespace DoubleLinkedList-Type\n     * @callback Comparitor\n     * @param {Object} node - object in the list\n     * @param {Number} idx - index of the object in the list\n     * @return {boolean} the user should return true any time a condition is met while comparing the node\n     */\n\n    /**\n     * @lends DoubleLinkedList\n     */\n    return {\n        /**\n         * @function\n         * @instance\n         * @memberof DoubleLinkedList\n         * @description Will trigger all the functions given to it when objects are added, removed or moved.\n         * @param {function} function to call when a change occurs\n         */\n        onChange:function(func){\n            typeof func === 'function' && onChangeList.push(func);\n        },\n        /**\n         * @function\n         * @instance\n         * @memberof DoubleLinkedList\n         * @description determines if there are any more undo left\n         * @returns {boolean}\n         */\n        canUndo:function(){\n            return undoCommandList.length > 0\n        },\n        /**\n         * @function\n         * @instance\n         * @memberof DoubleLinkedList\n         * @description will undo the last modifying command\n         */\n        undo:undo,\n\n        /**\n         * @function\n         * @instance\n         * @memberof DoubleLinkedList\n         * @description removes all the undo that the user can perform\n         */\n        clearUndo:function(){\n            undoCommandList = [];\n        },\n\n        /**\n         * @function\n         * @instance\n         * @memberof DoubleLinkedList\n         * @description is this data list empty?\n         * @returns {boolean}\n         */\n        isEmpty:function(){\n            return head === null || head === undefined;\n        },\n\n        /**\n         * @function\n         * @instance\n         * @memberof DoubleLinkedList\n         * @description Returns the size of this list\n         * @returns {Number}\n         */\n        getSize:function(){\n            return size;\n        },\n\n        /**\n         * @function\n         * @memberof DoubleLinkedList\n         * @instance\n         * @description Inserts data at the start of the list\n         * @summary\n         * This method is may be faster than the browser's native array\n         * in placing an object at the beginning of the array\n         * @param {Object | Array} data - Data to store into the array\n         */\n        insertAtStart:function(data){\n            insertAtPosition(data,0);\n        },\n\n        /**\n         * @function\n         * @memberof DoubleLinkedList\n         * @instance\n         * @description Inserts data at the end of the list\n         * @param {Object | Array} data - Data to store into the array\n         */\n        insertAtEnd:function(data){\n            insertAtPosition(data,size);\n        },\n\n        /**\n         * @function\n         * @memberof DoubleLinkedList\n         * @instance\n         * @description Inserts data at a specified position the list\n         * @param {Object | Array} data - Data to store into the array\n         */\n        insertAtPosition:insertAtPosition,\n\n        /**\n         * @function\n         * @instance\n         * @memberof DoubleLinkedList\n         * @description removes a node at the specified position\n         * @param {Number} position - index of the node you want to remove\n         */\n        deleteAtPosition:deleteAtPosition,\n\n        /**\n         * @function\n         * @instance\n         * @memberof DoubleLinkedList\n         * @description removes all the nodes\n         */\n        deleteAll:function(){\n\n            if(size){\n                var counter = size;\n                var undoItAll = [];\n                for(;counter > 0;counter--){\n                    deleteAtPosition(0);\n                    undoItAll.push(undo)\n                }\n                storeCommand(function(){\n                    for(var i = 0; i < undoItAll.length;i++){\n                        undoItAll[i]();\n                    }\n                });\n            }\n\n        },\n\n\n        /**\n         * @function\n         * @instance\n         * @memberof DoubleLinkedList\n         * @description removes a node at the specified position\n         * @param {Comparitor} comparitor - function that cycles through each element\n         * returning the node and index. The user must return true or false to indicate whether or not the\n         * node should be removed.\n         * @param isReversed {Boolean} to cycle through the list in reverse\n         * @example\n         * list.removeNode(function(node, idx){\n         *      return node.id === 4\n         * },true)\n         */\n        removeNode:function(comparitor, isReversed){\n\n            cycle(function(node, idx){\n                var shouldStop =  comparitor(node) && (function(){deleteAtPosition(idx); return true;})();\n                return !shouldStop;\n            }, isReversed);\n\n        },\n\n        /**\n         * @function\n         * @instance\n         * @memberof DoubleLinkedList\n         * @return {Object} the node at the end of the list\n         */\n        getTail:function(){return tail;},\n\n        /**\n         * @function\n         * @instance\n         * @memberof DoubleLinkedList\n         * @return {Object} the node at the start of the list\n         */\n        getHead:function(){return head;},\n\n\n        /**\n         * @todo optimize (Method is brute force)\n         * @function\n         * @instance\n         * @memberof DoubleLinkedList\n         * @description moves the object\n         * @param {Number} oldIdx - the index of the object you want to move\n         * @param {Number} newIdx - the index you want to move the old object to\n         */\n        move:function(oldIdx, newIdx){\n\n            //if invalid Number, leave\n            if(oldIdx === newIdx || oldIdx < 0 || newIdx < 0 || isNaN(oldIdx) || isNaN(newIdx)){\n                return\n            }\n\n            var current = recursiveFindByIndex(head, oldIdx);\n\n            var data =  current.getData();\n\n            deleteAtPosition(oldIdx);\n\n            insertAtPosition(data, newIdx);\n\n            //need to undo twice because the two previous methods add to the undo queue\n            storeCommand(function(){\n                undo();\n                undo();\n            });\n        },\n\n\n        /**\n         * @function\n         * @instance\n         * @memberof DoubleLinkedList\n         * @deprecated Will be removed by version 1.0.0. (Please use the psychic method instead)\n         * @description cycles through each node and returns it along with the index to the callback\n         * To break free from the cycle the user can return false.\n         * @param {Callback} callback - function that cycles through each element\n         * returning the node and index.\n         * @param isReversed {Boolean} to cycle through the list in reverse\n         * @example\n         * list.cycle(function(node, idx){\n         *      // Do something with the node\n         * })\n         */\n        cycle:cycle,\n\n\n        /**\n         * @function\n         * @instance\n         * @memberof DoubleLinkedList\n         * @description cycles through each node and returns it along with the previous node, the next node\n         * and the index to the callback. To break free from the cycle the user can return false or let it run to the end\n         * @param {Callback} callback - function that cycles through each element\n         * returning the node and index.\n         * @param isReversed {Boolean} to cycle through the list in reverse\n         * @example\n         * list.psychic(function(currentNode, previousNode, nextNode, idx){\n         *      // Do something with the node\n         *      // return true to keep going or false to stop\n         * })\n         */\n        psychic:psychic,\n\n        /**\n         * @function\n         * @instance\n         * @memberof DoubleLinkedList\n         * @description returns an array of the data\n         * @return {Array} the internal data as an array\n         */\n        toArray:function(){\n            var array = [];\n            cycle(function(node){\n                array.push(node.getData());\n                return true;\n            });\n            return array;\n        },\n\n        /**\n         * @function\n         * @instance\n         * @memberof DoubleLinkedList\n         * @description removes a node at the specified position\n         * @param {Comparitor | Object} comparitor - function that cycles through each element\n         * returning the node and index. The user must return true or false to indicate whether or not the\n         * node should be removed. Or it can be an object and the method will find any node that matches the attribute's\n         * data\n         * @example\n         * var array = list.findAll(function(node, idx){\n         *      return node.id === 4\n         * })\n         *\n         * var list = list.findAll({id:4})\n         */\n        findAll:findAll\n    };\n};\n\n\n/**\n * @namespace LinkNode\n * @class LinkNode\n * @constructor\n * @todo seal the default methods but allow object to be extensible\n * @description class that represents the nodes that make up the list. Each of the node are referenced to at most\n * two other nodes - a previous and a next.\n * @param data - any object to store\n * @param nextNode - a node to reference as next\n * @param previousNode - a node to reference as previous\n */\nfunction LinkNode(data, nextNode, previousNode) {\n    if(typeof data != 'object'){\n        throw 'Invalid data. Double Linked List can only take an object as a parameter not a ' + typeof data;\n    }\n\n    var prev = previousNode;\n    var next = nextNode;\n    var node = Object.create(Object.prototype);\n\n    /**\n     * @lends LinkNode\n     */\n    Object.defineProperties(node,{\n\n        /**\n         * @function\n         * @instance\n         * @memberof LinkNode\n         * @description returns the node that is after the node that called this method\n         * @return LinkNode\n         */\n        getNext:{value:getNext, enumerable:false, writable:false, configurable:false},\n\n        /**\n         * @function\n         * @instance\n         * @memberof LinkNode\n         * @description returns the node that is before the node that called this method\n         * @return LinkNode\n         */\n        getPrevious:{value:getPrevious, enumerable:false, writable:false, configurable:false},\n\n        /**\n         * @function\n         * @instance\n         * @memberof LinkNode\n         * @description takes a node object and sets it as the next node in the linked list\n         * @param {Node} obj - the node object you want to set as next\n         */\n        setNext:{value: setNext, enumerable:false, writable:false, configurable:false},\n\n        /**\n         * @function\n         * @instance\n         * @memberof LinkNode\n         * @description takes a node object and sets it as the previous node in the linked list\n         * @param {Node} obj - the node object you want to set as previous\n         */\n        setPrevious:{value: setPrevious, enumerable:false, writable:false, configurable:false},\n\n        /**\n         * @function\n         * @instance\n         * @memberof LinkNode\n         * @description true if there is another node linked after the node that is caller of this method\n         * @return Boolean\n         */\n        hasNext:{value:hasNext, enumerable:false, writable:false, configurable:false},\n\n        /**\n         * @function\n         * @instance\n         * @memberof LinkNode\n         * @description true if there is another node linked before the node that is caller of this method\n         * @return Boolean\n         */\n        hasPrev:{value:hasPrev, enumerable:false, writable:false, configurable:false},\n\n        /**\n         * @function\n         * @instance\n         * @memberof LinkNode\n         * @deprecated Will be removed by version 1.0.0. (Please use the getData data method instead)\n         * @return Object\n         */\n        getProtectedData:{value:getProtectedData, enumerable:false, writable:false, configurable:false},\n\n        /**\n         * @function\n         * @instance\n         * @description Returns the data that was passed into the object (or added) by the user\n         * @return Object\n         */\n        getData:{value:getData, enumerable:false, writable:false, configurable:false},\n\n        /**\n         * @function\n         * @instance\n         * @memberof LinkNode\n         * @description allows you to set data in the internal object.\n         * @param {Object} data - the information you want to store the node\n         * @param {String} key - the property you want to store the data at\n         */\n        appendData:{value: appendData, enumerable:false, writable:false, configurable:false},\n\n        /**\n         * @function\n         * @instance\n         * @memberof LinkNode\n         * @description getter for the internal data stored in the node\n         * @param {String} key - the attribute property name to access the data\n         */\n        getDataForKey:{value:getDataForKey, enumerable:false, writable:false, configurable:false},\n\n        /**\n         * @function\n         * @instance\n         * @memberof LinkNode\n         * @description sets the internal data object\n         * @param {Object} data - the information you want to store the node\n         */\n        setData:{value: setData, enumerable:false, writable:false, configurable:false}\n    });\n\n    setData(data);\n\n\n    function setData (data){\n        for(var property in data){\n            node[property] = data[property];\n        }\n        return node;\n    };\n\n\n    function getDataForKey (key){\n        return node[key];\n    };\n\n\n    function appendData (data, key){\n        node[key] = data;\n    };\n\n\n    function getProtectedData (){\n        console.error(\"Deprecated: Please use getData method instead\")\n        return getData()\n    }\n\n\n    function getData (){\n        var data = {};\n        for(var property in node){\n            data[property] = this[property];\n        }\n        return data;\n    }\n\n\n    function hasNext (){\n        return getNext() !== undefined;\n    }\n\n    function hasPrev (){\n        return getPrevious() !== undefined;\n    }\n\n\n    function setNext (obj){\n        next = obj;\n        return node;\n    }\n\n\n    function setPrevious (obj){\n        prev = obj;\n        return node;\n    }\n\n\n    function getNext (){\n        return next;\n    };\n\n    function getPrevious (){\n        return prev;\n    };\n\n    return node;\n}\n\n\n// WEBPACK FOOTER //\n// ./doubleLinkList.js"],"sourceRoot":""}